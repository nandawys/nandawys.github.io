<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>麻木的小武</title>
  <subtitle>我心中有猛虎，细嗅蔷薇。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nandawys.github.io/"/>
  <updated>2017-06-03T08:11:56.000Z</updated>
  <id>https://nandawys.github.io/</id>
  
  <author>
    <name>nandawys</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>207. Course Schedule</title>
    <link href="https://nandawys.github.io/2017/06/03/courseSchedule/"/>
    <id>https://nandawys.github.io/2017/06/03/courseSchedule/</id>
    <published>2017-06-03T07:30:15.000Z</published>
    <updated>2017-06-03T08:11:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Total Accepted: 50440<br>Total Submissions: 175254<br>Difficulty: Medium<br>There are a total of n courses you have to take, labeled from 0 to n - 1.</p>
<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</p>
<p>Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?</p>
<p>For example:</p>
<pre><code>2, [[1,0]]
</code></pre><p>There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.</p>
<pre><code>2, [[1,0],[0,1]]
</code></pre><p>There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>等同于有向图判断环路问题<br>可用拓扑排序或DFS</p>
<h2 id="邻接表-DFS"><a href="#邻接表-DFS" class="headerlink" title="邻接表+DFS"></a>邻接表+DFS</h2><blockquote>
<p>visited状态为 1 表示尚在dfs中，如果遇到说明环路<br>visited状态为 2 表示已经完成dfs，如果遇到则可以直接跳过</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> val = <span class="number">0</span></div><div class="line">        <span class="keyword">var</span> next: <span class="type">Node</span>!</div><div class="line">        </div><div class="line">        <span class="keyword">init</span>(val: <span class="type">Int</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.val = val</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(node: Node)</span></span> &#123;</div><div class="line">            <span class="keyword">var</span> r:<span class="type">Node</span>! = <span class="keyword">self</span></div><div class="line">            <span class="keyword">while</span> r.next != <span class="literal">nil</span> &#123;</div><div class="line">                r = r.next</div><div class="line">            &#125;</div><div class="line">            r.next = node</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> list: [<span class="type">Node</span>] = []</div><div class="line">    <span class="keyword">var</span> visited: [<span class="type">Int</span>] = []</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canFinish</span><span class="params">(numCourses: Int, <span class="number">_</span> prerequisites: [[Int]])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="built_in">count</span> = numCourses</div><div class="line">        list = (<span class="number">0</span>..&lt;<span class="built_in">count</span>).<span class="built_in">map</span> &#123; <span class="type">Node</span>(val: $<span class="number">0</span>)&#125;</div><div class="line">        visited = <span class="type">Array</span>(<span class="built_in">count</span>: <span class="built_in">count</span>, repeatedValue: <span class="number">0</span>)</div><div class="line">        </div><div class="line">        prerequisites.forEach &#123; (edge) <span class="keyword">in</span></div><div class="line">            list[edge[<span class="number">0</span>]].insert(<span class="type">Node</span>(val: edge[<span class="number">1</span>]))</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">if</span> visited[i] == <span class="number">0</span> &#123;</div><div class="line">                <span class="keyword">if</span> !dfs(list[i], list: list, visited: &amp;visited) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(node: Node!, list: [Node], <span class="keyword">inout</span> visited: [Int])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</div><div class="line">        </div><div class="line">        visited[node.val] = <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">var</span> r = node.next</div><div class="line">        <span class="keyword">while</span> r != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">if</span> visited[r.val] == <span class="number">1</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> visited[r.val] == <span class="number">2</span> &#123;</div><div class="line">                r = r.next</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> dfs(list[r.val], list: list, visited: &amp;visited) == <span class="literal">false</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">            r = r.next</div><div class="line">        &#125;</div><div class="line">        visited[node.val] = <span class="number">2</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="邻接矩阵-DFS（超时）"><a href="#邻接矩阵-DFS（超时）" class="headerlink" title="邻接矩阵+DFS（超时）"></a>邻接矩阵+DFS（超时）</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> nodes: [<span class="type">Int</span>] = []</div><div class="line">    <span class="keyword">var</span> matrix: [[<span class="type">Int</span>]] = []</div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> visited: [<span class="type">Bool</span>] = []</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canFinish</span><span class="params">(numCourses: Int, <span class="number">_</span> prerequisites: [[Int]])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="built_in">count</span> = numCourses</div><div class="line">        visited = <span class="type">Array</span>(<span class="built_in">count</span>: <span class="built_in">count</span>, repeatedValue: <span class="literal">false</span>)</div><div class="line">        nodes = [<span class="type">Int</span>](<span class="number">0</span>..&lt;<span class="built_in">count</span>)</div><div class="line">        matrix = (<span class="number">0</span>..&lt;<span class="built_in">count</span>).<span class="built_in">map</span> &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="type">Array</span>(<span class="built_in">count</span>: <span class="built_in">count</span>, repeatedValue: <span class="number">0</span>) &#125;</div><div class="line">        prerequisites.forEach &#123; (edge) <span class="keyword">in</span></div><div class="line">            matrix[edge[<span class="number">0</span>]][edge[<span class="number">1</span>]] = <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> history: [<span class="type">Int</span>] = []</div><div class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> nodes &#123;</div><div class="line">            <span class="keyword">if</span> _dfs(v, history: &amp;history) == <span class="literal">false</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">_dfs</span><span class="params">(v: Int, <span class="keyword">inout</span> history: [Int])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">if</span> history.<span class="built_in">contains</span>(v) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> visited[v] &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        history.append(v)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">if</span> matrix[v][i] == <span class="number">1</span> &#123;</div><div class="line">                <span class="keyword">if</span> _dfs(i,history: &amp;history) == <span class="literal">false</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        history.removeLast()</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="邻接表-拓扑排序-（时间复杂度O-V-E-）"><a href="#邻接表-拓扑排序-（时间复杂度O-V-E-）" class="headerlink" title="邻接表+拓扑排序 （时间复杂度O(V+E)）"></a>邻接表+拓扑排序 （时间复杂度O(V+E)）</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> val = <span class="number">0</span></div><div class="line">        <span class="keyword">var</span> next: <span class="type">Node</span>!</div><div class="line">        </div><div class="line">        <span class="keyword">init</span>(val: <span class="type">Int</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.val = val</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(node: Node)</span></span> &#123;</div><div class="line">            <span class="keyword">var</span> r:<span class="type">Node</span>! = <span class="keyword">self</span></div><div class="line">            <span class="keyword">while</span> r.next != <span class="literal">nil</span> &#123;</div><div class="line">                r = r.next</div><div class="line">            &#125;</div><div class="line">            r.next = node</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> list: [<span class="type">Node</span>] = []</div><div class="line">    <span class="keyword">var</span> degree: [<span class="type">Int</span>] = []</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canFinish</span><span class="params">(numCourses: Int, <span class="number">_</span> prerequisites: [[Int]])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="built_in">count</span> = numCourses</div><div class="line">        list = (<span class="number">0</span>..&lt;<span class="built_in">count</span>).<span class="built_in">map</span> &#123; <span class="type">Node</span>(val: $<span class="number">0</span>)&#125;</div><div class="line">        degree = <span class="type">Array</span>(<span class="built_in">count</span>: <span class="built_in">count</span>, repeatedValue: <span class="number">0</span>)</div><div class="line">        </div><div class="line">        prerequisites.forEach &#123; (edge) <span class="keyword">in</span></div><div class="line">            degree[edge[<span class="number">1</span>]] += <span class="number">1</span></div><div class="line">            list[edge[<span class="number">0</span>]].insert(<span class="type">Node</span>(val: edge[<span class="number">1</span>]))</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> zero: [<span class="type">Int</span>] = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;degree.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">if</span> degree[i] == <span class="number">0</span> &#123;</div><div class="line">                zero.append(i)</div><div class="line">                <span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> !zero.isEmpty &#123;</div><div class="line">            <span class="keyword">let</span> v = zero.popLast()!</div><div class="line">            <span class="keyword">var</span> r = list[v].next</div><div class="line">            <span class="keyword">while</span> r != <span class="literal">nil</span> &#123;</div><div class="line">                degree[r.val] -= <span class="number">1</span></div><div class="line">                <span class="keyword">if</span> degree[r.val] == <span class="number">0</span> &#123;</div><div class="line">                    zero.append(r.val)</div><div class="line">                    <span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">                r = r.next</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">count</span> == <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Total Accepted: 50440&lt;br&gt;Total Submissions: 175254&lt;br&gt;Difficulty: Medium&lt;br&gt;There are a total of n courses you have to take, labeled from
    
    </summary>
    
      <category term="LeetCode" scheme="https://nandawys.github.io/categories/LeetCode/"/>
    
    
      <category term="Leetcode" scheme="https://nandawys.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>200. numberOfIslands</title>
    <link href="https://nandawys.github.io/2017/06/03/numberOfIslands/"/>
    <id>https://nandawys.github.io/2017/06/03/numberOfIslands/</id>
    <published>2017-06-03T07:27:14.000Z</published>
    <updated>2017-06-03T08:12:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<p><strong><em>Example 1:</em></strong></p>
<pre><code>11110
11010
11000
00000
</code></pre><p>Answer: 1</p>
<p>Example 2:</p>
<pre><code>11000
11000
00100
00011
</code></pre><p>Answer: 3</p>
<h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><blockquote>
<p>DFS、BFS<br>这种解法效率太低</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> iLen = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> jLen = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> tree: [<span class="type">Int</span>] = []</div><div class="line">    <span class="keyword">var</span> grid: [[<span class="type">Character</span>]] = []</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">numIslands</span><span class="params">(grid: [[Character]])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.grid = grid</div><div class="line">        <span class="keyword">if</span> grid.<span class="built_in">count</span> &lt;= <span class="number">0</span> || grid[<span class="number">0</span>].<span class="built_in">count</span> &lt;= <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        iLen = grid.<span class="built_in">count</span></div><div class="line">        jLen = grid[<span class="number">0</span>].<span class="built_in">count</span></div><div class="line">        <span class="keyword">var</span> <span class="built_in">count</span> = iLen*jLen</div><div class="line">        tree = [<span class="type">Int</span>](<span class="number">0</span>..&lt;<span class="built_in">count</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;grid.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;grid[i].<span class="built_in">count</span> &#123;</div><div class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">"0"</span> &#123;</div><div class="line">                    <span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">                    <span class="keyword">continue</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> process(i-<span class="number">1</span>, j: j, index: getIndex(i, j: j)) || process(i, j: j-<span class="number">1</span>, index: getIndex(i, j: j)) &#123;</div><div class="line">                    <span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(i: Int, j: Int, index: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span> || i &gt;= iLen || j &lt; <span class="number">0</span> || j &gt;= jLen || grid[i][j] == <span class="string">"0"</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        union(getIndex(i, j: j), index2: index)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getIndex</span><span class="params">(i: Int, j: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> i*iLen + j</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findRoot</span><span class="params">(index: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> root = index</div><div class="line">        <span class="keyword">while</span> root != tree[root] &#123;</div><div class="line">            tree[root] = tree[tree[root]]</div><div class="line">            root = tree[root]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">union</span><span class="params">(index1: Int, index2: Int)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> findRoot(index1) == findRoot(index2) &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        tree[findRoot(index1)] = findRoot(index2)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><blockquote>
<p>并查集<br>这个算法很经典</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> iLen = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> jLen = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> tree: [<span class="type">Int</span>] = []</div><div class="line">    <span class="keyword">var</span> grid: [[<span class="type">Character</span>]] = []</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">numIslands</span><span class="params">(grid: [[Character]])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">self</span>.grid = grid</div><div class="line">        <span class="keyword">if</span> grid.<span class="built_in">count</span> &lt;= <span class="number">0</span> || grid[<span class="number">0</span>].<span class="built_in">count</span> &lt;= <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        iLen = grid.<span class="built_in">count</span></div><div class="line">        jLen = grid[<span class="number">0</span>].<span class="built_in">count</span></div><div class="line">        <span class="keyword">var</span> <span class="built_in">count</span> = iLen*jLen</div><div class="line">        tree = [<span class="type">Int</span>](<span class="number">0</span>..&lt;<span class="built_in">count</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;grid.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;grid[i].<span class="built_in">count</span> &#123;</div><div class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">"0"</span> &#123;</div><div class="line">                    <span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">                    <span class="keyword">continue</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> process(i-<span class="number">1</span>, j: j, index: getIndex(i, j: j)) &#123;</div><div class="line">                    <span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> process(i, j: j-<span class="number">1</span>, index: getIndex(i, j: j)) &#123;</div><div class="line">                    <span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> process(i+<span class="number">1</span>, j: j, index: getIndex(i, j: j)) &#123;</div><div class="line">                    <span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> process(i, j: j+<span class="number">1</span>, index: getIndex(i, j: j)) &#123;</div><div class="line">                    <span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(i: Int, j: Int, index: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span> || i &gt;= iLen || j &lt; <span class="number">0</span> || j &gt;= jLen || grid[i][j] == <span class="string">"0"</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> union(getIndex(i, j: j), index2: index)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getIndex</span><span class="params">(i: Int, j: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> i*jLen + j</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findRoot</span><span class="params">(index: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">var</span> root = index</div><div class="line">        <span class="keyword">while</span> root != tree[root] &#123;</div><div class="line">            tree[root] = tree[tree[root]]</div><div class="line">            root = tree[root]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">union</span><span class="params">(index1: Int, index2: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">if</span> findRoot(index1) == findRoot(index2) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        tree[findRoot(index1)] = findRoot(index2)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by conne
    
    </summary>
    
      <category term="LeetCode" scheme="https://nandawys.github.io/categories/LeetCode/"/>
    
    
      <category term="Leetcode" scheme="https://nandawys.github.io/tags/Leetcode/"/>
    
  </entry>
  
</feed>
